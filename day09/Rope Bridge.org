#+title: Rope Bridge
#+description: Advent of Code 2022 Day 9

* Part 1
This rope bridge creaks as you walk along it.  You aren't sure how old it is, or
whether it can even support your weight.

It seems to support the Elves just fine, though.  The bridge spans a
gorge which was carved out by the massive river far below you.

You step carefully; as you do, the ropes stretch and twist.  You
decide to distract yourself by modeling rope physics; maybe you can even
figure out where /not/ to step.

Consider a rope with a knot at each end; these knots mark the /head/ and the
/tail/ of the rope.  If the head moves far enough away from the tail, the tail is
pulled toward the head.

Due to nebulous reasoning involving [[https://en.wikipedia.org/wiki/Planck_units#Planck_length][Planck lengths]], you should be able to model
the positions of the knots on a two-dimensional grid. Then, by following a
hypothetical /series of motions/ (your puzzle input) for the head, you can
determine how the tail will move.

Due to the aforementioned Planck lengths, the rope must be quite short; in fact,
the head (=H=) and tail (=T=) must /always be touching/ (diagonally adjacent and
even overlapping both count as touching):

#+BEGIN_EXAMPLE
  ....
  .TH.
  ....

  ....
  .H..
  ..T.
  ....

  ...
  .H. (H covers T)
  ...
#+END_EXAMPLE

If the head is ever two steps directly up, down, left, or right from
the tail, the tail must also move one step in that direction so it
remains close enough:

#+BEGIN_EXAMPLE
  .....    .....    .....
  .TH.. -> .T.H. -> ..TH.
  .....    .....    .....

  ...    ...    ...
  .T.    .T.    ...
  .H. -> ... -> .T.
  ...    .H.    .H.
  ...    ...    ...
#+END_EXAMPLE

Otherwise, if the head and tail aren't touching and aren't in the same row or
column, the tail always moves one step diagonally to keep up:

#+BEGIN_EXAMPLE
  .....    .....    .....
  .....    ..H..    ..H..
  ..H.. -> ..... -> ..T..
  .T...    .T...    .....
  .....    .....    .....

  .....    .....    .....
  .....    .....    .....
  ..H.. -> ...H. -> ..TH.
  .T...    .T...    .....
  .....    .....    .....
#+END_EXAMPLE

You just need to work out where the tail goes as the head follows a series of
motions. Assume the head and the tail both start at the same position,
overlapping.

For example:

#+BEGIN_EXAMPLE
  R 4
  U 4
  L 3
  D 1
  R 4
  D 1
  L 5
  R 2
#+END_EXAMPLE

This series of motions moves the head /right/ four steps, then /up/ four steps,
then /left/ three steps, then /down/ one step, and so on.  After each step,
you'll need to update the position of the tail if the step means the head is no
longer adjacent to the tail.  Visually, these motions occur as follows (=s= marks
the starting position as a reference point):

#+BEGIN_EXAMPLE
  == Initial State ==

  ......
  ......
  ......
  ......
  H.....  (H covers T, s)

  == R 4 ==

  ......
  ......
  ......
  ......
  TH....  (T covers s)

  ......
  ......
  ......
  ......
  sTH...

  ......
  ......
  ......
  ......
  s.TH..

  ......
  ......
  ......
  ......
  s..TH.

  == U 4 ==

  ......
  ......
  ......
  ....H.
  s..T..

  ......
  ......
  ....H.
  ....T.
  s.....

  ......
  ....H.
  ....T.
  ......
  s.....

  ....H.
  ....T.
  ......
  ......
  s.....

  == L 3 ==

  ...H..
  ....T.
  ......
  ......
  s.....

  ..HT..
  ......
  ......
  ......
  s.....

  .HT...
  ......
  ......
  ......
  s.....

  == D 1 ==

  ..T...
  .H....
  ......
  ......
  s.....

  == R 4 ==

  ..T...
  ..H...
  ......
  ......
  s.....

  ..T...
  ...H..
  ......
  ......
  s.....

  ......
  ...TH.
  ......
  ......
  s.....

  ......
  ....TH
  ......
  ......
  s.....

  == D 1 ==

  ......
  ....T.
  .....H
  ......
  s.....

  == L 5 ==

  ......
  ....T.
  ....H.
  ......
  s.....

  ......
  ....T.
  ...H..
  ......
  s.....

  ......
  ......
  ..HT..
  ......
  s.....

  ......
  ......
  .HT...
  ......
  s.....

  ......
  ......
  HT....
  ......
  s.....

  == R 2 ==

  ......
  ......
  .H....  (H covers T)
  ......
  s.....

  ......
  ......
  .TH...
  ......
  s.....
#+END_EXAMPLE

After simulating the rope, you can count up all of the positions the /tail
visited at least once/.  In this diagram, =s= again marks the starting position
(which the tail also visited) and =#= marks other positions the tail visited:

#+BEGIN_EXAMPLE
  ..##..
  ...##.
  .####.
  ....#.
  s###..
#+END_EXAMPLE

So, there are =13= positions the tail visited at least once.

Simulate your complete hypothetical series of motions. /How many positions does
the tail of the rope visit at least once?/

To begin, [[file:///home/jt/Developer/learning/advent2022/day09/input.txt][get your puzzle input]].

** Notes

#+begin_src txt
~diff = Coordinate(head.y - tail.y, head.x - tail.x)~

+---+---+---+  ↑
| 8 | 1 | 2 |  y-
+---+---+---+
| 7 |   | 3 |  y=0
+---+---+---+
| 6 | 5 | 4 |  y+
+---+---+---+  ↓

← -x x=0  x+→
#+end_src

If tail is in middle:
- head above =1=:
  ~head.y - tail.y = -2; dx == 0~
- head above =2=:
  ~head.y - tail.y = -2; head.x - tail.x = +1~
- head left of =7=:
  ~head.x - tail.x = +2; dy == 0~
- head below and to left of =6=:
  ~head.y - tail.y = +2; head.x - tail.x = -2~

so ~abs(dx)~ or ~abs(dy)~ greater than 1 requires movement.
if neither ~dx~ nor ~dy~ is ~0~ then diagonal movement.
